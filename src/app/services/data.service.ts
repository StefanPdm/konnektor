import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class DataService {
  private konnektors = [
    {
      id: 1,
      name: 'AXP37G-4',
      ram_usage_percent: this.getRandomIntValue(10, 79),
      cpu_usage_percent: this.getRandomIntValue(1, 100),
      is_active: true,
      online_since: '2020-01-01',
      firmware_version: 'v1.0.56',
      update_available: true,
      pending_transactions: this.getRandomIntValue(10, 1000),
      alltime_uploads: this.getRandomFloatValue(10, 100, 2),
      labels_24h: [
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
      ],
      lables_7d: ['', '', '', '', '', '', ''],
      labels_30d: [
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
      ],
      ram_usage_24h: this.getRandomKonnektorValueArray(24, 10, 100),
      ram_usage_7d: this.getRandomKonnektorValueArray(7, 10, 100),
      ram_usage_30d: this.getRandomKonnektorValueArray(30, 10, 100),
      cpu_usage_24h: this.getRandomKonnektorValueArray(24, 1, 100),
      cpu_usage_7d: this.getRandomKonnektorValueArray(7, 1, 100),
      cpu_usage_30d: this.getRandomKonnektorValueArray(30, 1, 100),
    },
    {
      id: 2,
      name: 'BXP37G-5',
      ram_usage_percent: this.getRandomIntValue(10, 79),
      cpu_usage_percent: this.getRandomIntValue(1, 100),
      is_active: false,
      online_since: '2023-07-27',
      firmware_version: 'v2.0.1',
      update_available: false,
      pending_transactions: this.getRandomIntValue(10, 1000),
      alltime_uploads: this.getRandomFloatValue(10, 100, 2),
      labels_24h: [
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
      ],
      lables_7d: ['', '', '', '', '', '', ''],
      labels_30d: [
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
      ],
      ram_usage_24h: this.getRandomKonnektorValueArray(24, 10, 100),
      ram_usage_7d: this.getRandomKonnektorValueArray(7, 10, 100),
      ram_usage_30d: this.getRandomKonnektorValueArray(30, 10, 100),
      cpu_usage_24h: this.getRandomKonnektorValueArray(24, 1, 100),
      cpu_usage_7d: this.getRandomKonnektorValueArray(7, 1, 100),
      cpu_usage_30d: this.getRandomKonnektorValueArray(30, 1, 100),
    },
  ];

  getKonnektors() {
    return this.konnektors;
  }

  getRandomKonnektorValueArray(length: number, max: number, min: number) {
    const randomArray = [];
    for (let i = 0; i < length; i++) {
      const randomNumber = Math.floor(Math.random() * (max - min + 1) + min);
      randomArray.push(randomNumber);
    }
    return randomArray;
  }

  getRandomIntValue(max: number, min: number) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }

  getRandomFloatValue(max: number, min: number, decimalPlaces: number) {
    const randomFloat = Math.random() * (max - min) + min;
    return parseFloat(randomFloat.toFixed(decimalPlaces));
  }
}
